/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.team3.UI.JPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author Dell Vostro
 */
public class MenuItems extends javax.swing.JPanel {
    
    private boolean showing = false;
    
    private final ArrayList<MenuItems> subMenu = new ArrayList<>();
    
    private ActionListener act;
    
    /**
     * Creates new form Menu
     * @param icon
     * @param menuName
     * @param act
     * @param subMenu
     */
    public MenuItems(Icon icon, String menuName, ActionListener act, MenuItems... subMenu) {
        initComponents();
        
        lblIcon.setIcon(icon);
        lblName.setText(menuName);
        if (act != null) {
            this.act = act;
        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));
        for (int i = 0; i < subMenu.length; i++) {
            this.subMenu.add(subMenu[i]);
            subMenu[i].setVisible(false);
        }
    }
    public MenuItems(Icon icon1, Icon icon2, String menuName, ActionListener act, MenuItems... subMenu) {
        initComponents();
      
        lblIcon.setIcon(icon1);
        lblIcon2.setIcon(icon2);
        lblName.setText(menuName);
        if (act != null) {
            this.act = act;
        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));
        for (int i = 0; i < subMenu.length; i++) {
            this.subMenu.add(subMenu[i]);
            subMenu[i].setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIcon = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblIcon2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 47, 40));

        lblName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblName.setText("MenuName");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 7, 130, 30));

        lblIcon2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add(lblIcon2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 5, 30, 30));

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 250, 1));
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (showing) {
            hideMenu();
        } else {
            showMenu();
        }
        if (act != null) {
            act.actionPerformed(null);
        }
    }//GEN-LAST:event_formMouseClicked

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        this.setBackground(new Color(117, 121, 137));
        lblName.setForeground(Color.white);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        this.setBackground(new Color(204, 204, 204));
        lblName.setForeground(Color.black);
    }//GEN-LAST:event_formMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblIcon2;
    private javax.swing.JLabel lblName;
    // End of variables declaration//GEN-END:variables
    
    
    public ArrayList<MenuItems> getSubMenu() {
        return subMenu;
    }
    public void setShowing(boolean showing) {
        this.showing = showing;
    }
    
    private void showMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i < subMenu.size(); i++) {
                    sleep();
                    subMenu.get(i).setVisible(true);
                }
                showing = true;
                getParent().repaint();
                getParent().revalidate();
            }
        }).start();
    }

    private void hideMenu() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = subMenu.size() - 1; i >= 0; i--) {
                    sleep();
                    subMenu.get(i).setVisible(false);
                    subMenu.get(i).hideMenu();
                }
                getParent().repaint();
                getParent().revalidate();
                showing = false;
            }
        }).start();
    }

    private void sleep() {
        try {
            Thread.sleep(50);
        } catch (Exception e) {
        }
    }
}
